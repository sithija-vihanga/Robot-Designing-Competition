//TEAM SPECTRO
#include <webots/Robot.hpp>
#include <webots/Camera.hpp>
#include <webots/Display.hpp>
#include <webots/Keyboard.hpp>
#include <webots/Motor.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgcodecs/imgcodecs.hpp>
#include <webots/DistanceSensor.hpp>
#include <string>
#include <vector>


using namespace webots;
using namespace cv;
using namespace std;

//////////////////////////////// Functions //////////////////////////////////
////////// Vision Controls ////////

void keyBoardControls();
void getContours(Mat imgIn, Mat imgOut);

////// Basic motion controls /////

void forward();
void reverse();
void turnRight();
void turnLeft();
void stop();
void skidDrive(double Lspeed, double Rspeed);
void readLineSensors();
int  compareLines( double values);
void pidLineFollower();
double speedControl(double speed);
void floorPattern();
int compare(const void* a, const void* b);
void search180();
void imagePointFollowing();
void grabTheBox();
void readWallSensors();
void controlForward(int n); 

//////////////////////////////////////////////////////////////////////////////  

/////////////////////////////// Definitions //////////////////////////////////
 //Motor *base; 
 Motor *camControl;
 Motor *wheels[4];  

 DistanceSensor *DS[8];  //IR sensors
 DistanceSensor *US[7];  //Ultrasonic sensors
 
 Motor *armMotors[6]; 
 

 //////////////////////////////////////////////////////////////////////////////

// box gripper control variables
double rotate = 0.1;
double upAndDown = 0.0;
double armrotate = -2.2;
double catchRight = 0.5;
double catchLeft = -0.22;
int stage = 0;
int gripperCounter = 0;

//line following variables
int counter = 0;
int speed = 5;
int sensorReadings[8];
double lineControlSignal = 0.0;
double lineErrorSum = 0.0;
double lineError[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
int leftSpeed = 0;
int rightSpeed = 0;

//line following PID  variables 
double line_Kp = 1;
double line_Kd = 1;
double line_Ki = 0.01;
double lineErrorPredict = 0.0;

//floor pattern variables 
string floorColor = "Black";
string floorLocation= "Unknown";
int floorErrorControl[5] = {0,0,0,0,0};
int sortedFloorError[5];
int hardTurnCounter = 0;
int whiteLineCounter = 0;
int blackLineCounter = 0;
bool T_Junction = false;
int turnRightCounter = 0;
int turnLeftCounter = 0;
bool rightTurn = false;
bool leftTurn = false;

//Box Arena Variables
bool boxSearch = true;
int searchCounter = 0;
int xBoxPoints[5]= {0,0,0,0,0};  //Sorted x points of the box
int xPointUnsorted[5]= {0,0,0,0,0};  //unsorted xpoints
bool sendForward = true;   //send the robot forward for some time to reduce errors
  
// Vision control variables
int key;          //Keyboard input
int pixelSum = 0; //Sum of pixels in given region
string color;     //Store detected color
double distance = 10;  //measured distance.  Not zero anywhere
int boxSize = 5;

//Image point Follwoing Variables
int turnLeftControl = 0;
int turnRightControl = 0;
bool reached = false;
bool orientation = false;

//Wall following
int sonicSensorReadings[7] = {0,0,0,0,0,0,0};

//Control forward
int iter = 0;



//******************************** Control Commands *****************************************
//bool PID_Line_Follower = true;
//bool getColor = false;
string location = "Box_Arena";


//*******************************************************************************************
int main() {
  /////////////////////////////////////////// Initialize //////////////////////////////////////////
  //Initialize the robot//
  Robot *robot = new Robot();
  const int timeStep = robot->getBasicTimeStep();

  //Initialize the camera//
  Camera *camera = robot->getCamera("cam");
  camera->enable(timeStep);
  const int width = camera->getWidth();
  const int height = camera->getHeight();

  //Initialize camera base controls
  //base=robot->getMotor("cmBase");
  //camControl=robot->getMotor("camMotor");

  //Initialize the keyboard//
  Keyboard kb;            
  kb.enable(timeStep);
  
  char ultraSonicNames[7][12] = {"Front","FrontRight","FrontLeft","Right_1","Right_2","Left_1","Left_2"};
  char armMotorNames[6][20] = {"linear motor","rotational motor1","cmBase","camMotor","rotational motor2","rotational motor3"};
  char wheels_names[4][15] = {"leftTopMotor", "leftRearMotor","rightTopMotor", "rightRearMotor"};                                //store names of motors
  char dsNames[8][8] = {"IR1","IR2","IR3","IR4","IR5","IR6","IR7","IR8"}; 
  
  for (int i = 0; i < 4; i++) {                                      //Initializing motors using a for loop
    wheels[i] = robot->getMotor(wheels_names[i]);
    wheels[i]->setPosition(INFINITY);
    
  }
  
    for (int j = 0; j<8; j++){                                                    //Enabling distance sensors using for a loop
     DS[j] = robot->getDistanceSensor(dsNames[j]);                 
     DS[j]->enable(timeStep);                                      
 }
 
  for (int j = 0; j<7; j++){                                                    //Enabling distance sensors using for a loop
     US[j] = robot->getDistanceSensor(ultraSonicNames[j]);                 
     US[j]->enable(timeStep);                                      
 }
 
 for (int i = 0; i < 6; i++) {                                      //Initializing motors of the arm using a for loop
      armMotors[i] = robot->getMotor(armMotorNames[i]);
      //armMotors[i]->setPosition(INFINITY);
 }
 
 
  
  ////////////////////////// Image processing Initialization //////////////////////////////
  int grayImage[width][height];
  //int cannyImage[width][height];
  cout<<"width is :"<<width<<" height is :"<<height<<endl;  //Output image size
  Display *display = robot->getDisplay("display");
  Mat imageGray = Mat::zeros(Size(width,height),CV_8UC1);
  //Mat imageCanny = Mat::zeros(Size(width,height),CV_8UC1);
  Mat imageMat = Mat(Size(width, height),  CV_8UC4);     //generate empty image
  // Mat proImg = Mat(Size(width, height),  CV_8UC4);     //generate empty image

  /////////////////////////////////////////////////////////////////////////////////////////


  while (robot->step(timeStep) != -1) {
    key= kb.getKey();                                   //Read keyboard inputs
    

    //////////////////////////////// Basic motion ////////////////////////////////////////
    if (location=="Line_Following"){
    leftSpeed = speedControl(speed+lineControlSignal);
    rightSpeed = speedControl(speed-lineControlSignal);
             
             //****************** CHANGE THIS ************************
             if(floorLocation=="T_Junction"){   //Decision at first junction
               rightTurn = true;
             }
             //*******************************************************

             if(rightTurn){
                 turnRight();
                 turnRightCounter++;
                 if (turnRightCounter>30){
                     rightTurn = false;
                     turnRightCounter = 0;
                 }
             }
             
             else if(leftTurn){
                 turnLeft();
                 turnLeftCounter++;
                 if (turnLeftCounter>30){
                     leftTurn = false;
                     turnLeftCounter = 0;
                 }
             }
             else{
             skidDrive(leftSpeed,rightSpeed);
             }
             counter+=1;
             readLineSensors();
             
             floorPattern();
             
             pidLineFollower();

    }
    else{
      stop();  ///CHANGE THIS
    }
    ///////////////////////////////////////////////////////////////////////////////////////////    
    
    

    //////////////////////////////// Image Processing ///////////////////////////////////////

    const unsigned char *data = camera->getImage();     //Taking a picture from camera

    if (data) {
      //int pixel =  camera->imageGetGray( data,width, 10, 10);
      //cout <<pixel<<endl;
      imageMat.data = (unsigned char *)data;                         //convert const unsigned char to unsigned char
      //GaussianBlur(imageMat, proImg, Size(9, 9),0);
      //GaussianBlur(imageMat, imageGray, Size(9, 9),0);                //Gaussian blur
      //rectangle(imageMat, Point(20,20),Point(30,30),Scalar(255,255,255),FILLED); 
      //cvtColor(imageMat, imageGray, COLOR_BGR2GRAY);
      //cout<<"start uploading"<<endl;
      for (int i = 0 ; i < width ; i++){
        for ( int j = 0 ; j< height ; j++){
             int value = camera->imageGetGray( data,width, i, j);
             grayImage[j][i] = value+100;    //Change color ranges
             //cout<<value<<endl;
            
        }
      }
      
      ////////////////////////////////// Chess Board Image Processing /////////////////////////////////////////
      
      if (location == "Chess_Board"){
      
      
      for(int i = (31-boxSize); i<(31+boxSize); i++){             //Calculate pixel values to identify black or white
        for(int j = (31-boxSize); j<(31+boxSize); j++){           //Change the box with distance
            pixelSum = pixelSum+grayImage[j][i];
               
        } 
      }
      pixelSum = pixelSum/((2*boxSize)^2);    //Check for white or black 
      //cout<<pixelSum<<endl;
      if(pixelSum >= 2700){   //Threshhold for white
        color = "White";
        cout<<color<<endl; 
      }
      else if(pixelSum<2700){
        color = "Black";
        cout<<color<<endl;
      }
      //Mat grayMat(width, height, CV_64F, grayImage);
      //cout <<" Image uploaded"<<endl;  
      
      rectangle(imageMat, Point((31-boxSize),(31-boxSize)),Point((31+boxSize),(31+boxSize)),Scalar(0, 255, 0), 1 , LINE_8);
      //rectangle(imageMat, Point(10,10),Point(20,20),Scalar(255,255,255),FILLED);
      //cout<< pixel<<endl;
      
      }
      ///////////////////////////////////////////////Box Arena vision //////////////////////////////////
      
      if (location == "Box_Arena"){
      //cout<<sonicSensorReadings[0]<<" "<<sonicSensorReadings[1]<<" "<<sonicSensorReadings[2]<<" "<<endl; 
      //Mat greyImg = Mat(width, height , CV_8U, &grayImage);
      Mat Img = Mat(width, height , CV_8UC4, &grayImage);
      GaussianBlur(Img, Img, Size(5, 5),0); 
      Mat imageCanny; 
      Canny(Img, imageCanny, 100, 300,3);
      Mat kernel = getStructuringElement(MORPH_RECT, Size(3,3));
      dilate(imageCanny,imageCanny,kernel); 
      //cvtColor(imageCanny,imageGray,COLOR_BGRA2GRAY);  
      
      //Converting to gray scale  
      getContours(imageCanny,imageMat);  //Get contours
      
      //Turn left and right for box search
      if (boxSearch){
      search180();  
      }
      if ( not boxSearch){
      
      readWallSensors();
      imagePointFollowing();
      
      }
      
      } 
      ImageRef *ir = display->imageNew(width, height, imageMat.data , Display::BGRA);     //Generating output image
      display->imagePaste(ir, 0, 0, false);
      display->imageDelete(ir);
      
      
      }
      //keyBoardControls();
  }

  delete robot;
  return 0;
}

/*

void keyBoardControls(){
        ////////////////// rotateBase the camera ///////////////// 
            if(key == 65 && rotateBase <1.57){             //Turn left and Right
              rotateBase += 0.1;
              }
            else if(key == 68 && rotateBase >-1.57){
              rotateBase += -0.1; 
              }
            else {
              rotateBase +=0; 
            }
            base->setPosition(rotateBase);
            
            if(key == 87 && upAndDown <1.57){               //Turn up and Down
              upAndDown += 0.1;
              }
            else if(key == 83 && upAndDown >-1.7){
              upAndDown += -0.1; 
              }
            else {
              upAndDown +=0; 
            }
            camControl->setPosition(upAndDown);
          
            //std::cout<<key<<std::endl;
       ////////////////////////////////////////////////////

} */
 
void getContours(Mat imgIn, Mat imgOut){
  vector<vector<Point>>contours;
  vector<Vec4i>hierarchy;
  
  findContours(imgIn,contours,hierarchy,RETR_EXTERNAL,CHAIN_APPROX_SIMPLE);
  //drawContours(imgOut , contours , -1,Scalar(255,0,255),1);
  
  for (int i = 0; i< contours.size(); i++){
        
        int pointNum = 0;             //Initialize x points to 0
        for (int j = 0; j<5; j++){
          xPointUnsorted[j] = 0;
        }
        int area = contourArea(contours[i]);
        //cout<< "area: "<<area << endl;
        //cout<< sizeof(contours[i])<<endl;
        //vector<vector<Point>> conPoly(contours.size());
        if ((area > 80) and (sizeof(contours[i])<30)){     //Change threshhold values for better callibration
            //float peri = arcLength(contours[i], true);
            //approxPolyDP(contours[i], conPoly[i], 0.02*peri,true);
            drawContours(imgOut, contours, i, Scalar(255,0,255), 1);
            //cout<<contours[i][2]+contours[i][3]<<endl;
            int xPoint = contours[i][0].x;
            int yPoint = contours[i][0].y;
            
            
            
            if (xPoint<64 and yPoint <64 and yPoint>15){
                 circle(imgOut,Point(xPoint,yPoint),3,Scalar(0,69,255),FILLED);
                 line(imgOut,Point(0,15),Point(64,15),Scalar(155,255,100),2);
                 line(imgOut,Point(32,0),Point(32,64),Scalar(0,255,0),1);
                 boxSearch = false;                    //To stop 180 search
                 xPointUnsorted[pointNum] = xPoint;        //Upload new x points
                 pointNum++;
                 qsort(xPointUnsorted,5,sizeof(int),compare);
                 for(int k = 0;k<5;k++){
                     xBoxPoints[k] = xPointUnsorted[k];
                   }
                 
                 /* if(sendForward){
                      cout<<"working"<<endl;
                      controlForward(200);
                  }
                  sendForward = false; */
                 //cout<<Point(xPoint,yPoint)<<endl;
                 //imagePointFollowing(xBoxPoints);
                 
                 //cout<<xBoxPoints[0]<<"  "<<xBoxPoints[1]<<" "<<xBoxPoints[2]<<"  "<<xBoxPoints[3]<<"  "<<xBoxPoints[4]<<endl;
                 }
            /*
            int xPoint = 0;
            int yPoint = 0;
            for (int j =0 ; j<sizeof(contours[i]); j++){
                contours[i][0] += contours[i][j];
              }
             xPoint = contours[i][0].x/sizeof(contours[i]);
             yPoint = contours[i][0].y/sizeof(contours[i]);
             cout<<Point(xPoint,yPoint)<<endl;
             if (xPoint<64 and yPoint <64 and yPoint>15){
                 circle(imgOut,Point(xPoint,yPoint),3,Scalar(0,69,255),FILLED);
                } cout<<Point(xPoint,yPoint)<<endl;
                 */
              
             
             
            //cout<< "area: "<<area <<"points :"<<conPoly.size()<<endl;
            
            
       }
        
  }
  
  

}  

 void forward(){
               wheels[0]->setVelocity(speed);
               wheels[1]->setVelocity(speed);
               wheels[2]->setVelocity(speed);
               wheels[3]->setVelocity(speed);
 }
void reverse(){
               wheels[0]->setVelocity(-speed);
               wheels[1]->setVelocity(-speed);
               wheels[2]->setVelocity(-speed);
               wheels[3]->setVelocity(-speed);
 }
 
 void turnRight(){
               wheels[0]->setVelocity(speed);
               wheels[1]->setVelocity(speed);
               wheels[2]->setVelocity(-speed);
               wheels[3]->setVelocity(-speed);
 }

 void turnLeft(){
               wheels[0]->setVelocity(-speed);
               wheels[1]->setVelocity(-speed);
               wheels[2]->setVelocity(speed);
               wheels[3]->setVelocity(speed);
 }
 
 void stop(){
               wheels[0]->setVelocity(0);
               wheels[1]->setVelocity(0);
               wheels[2]->setVelocity(0);
               wheels[3]->setVelocity(0);
 }

 void skidDrive(double Lspeed , double Rspeed){                //Differential drive
               wheels[0]->setVelocity(Lspeed);
               wheels[1]->setVelocity(Lspeed);
               wheels[2]->setVelocity(Rspeed);
               wheels[3]->setVelocity(Rspeed);
 }
 
 void readLineSensors(){
               
                for (int j = 0; j <8; j++){
                   sensorReadings[j] = DS[j]->getValue();                                                    //Enabling distance sensors using for a loop
                   sensorReadings[j] = compareLines( sensorReadings[j]);              
                                              
                   }
                
               
                   
 }
 
 void readWallSensors(){
            for (int j = 0; j <7; j++){
                   sonicSensorReadings[j] = US[j]->getValue();                                                    //Enabling distance sensors using for a loop           
                                              
                   }
  }
 
 int compareLines(double value){    //Edit the threshhold values
 
                //cout<< value <<endl;                   // Extracting colors
                if (value<100){                        
                  return 1;                         //White
                }
                else if((value>100) and (value <150)){   //Red
                  return 1;
                }
                else if(value>600 and value <700){     //Blue
                  return 1;
                }
                else if(value>700){                 //Black
                  return 0;
                }
                else {
                  return 1;
                }
 }

 /*double maxSpeedControl(double lineControlSignal){
                double speed = maxSpeed;
                if(lineControlSignal > 4){
                   speed = maxSpeed - lineControlSignal;
                }
                 return speed; 
 } */

double speedControl(double speed){
              if (speed>10){
                speed = 10;
              }
              else if (speed<-10){
                speed = -10;
              }
              return speed;
 }

 void pidLineFollower(){
                for (int i = 0; i<4 ; i++){                           // Storing 5 previous lineError values
                  lineError[i] = lineError[i+1];
                }

              
                if (lineError[3]>lineError[2]){                          
                  if (lineError[3]<lineError[2]+8){                      
                      
                  }
                  else{
                    lineError[3] = lineError[2];
                  }
                }
                else if(lineError[3]<lineError[2]){
                  if (8+lineError[3]>lineError[2]){                      
                      
                  }
                   else{
                    lineError[3] = lineError[2];
                  }
                }
                
                lineErrorSum += lineError[3];                    // Get sum of the errors
                

          
                //lineError[4] = 2*(sensorReadings[7]-sensorReadings[5])+2*(1-sensorReadings[7])*(1-sensorReadings[5])*(sensorReadings[4]-sensorReadings[0])+(sensorReadings[4]-sensorReadings[1]);      // Error algorithm
                lineError[4] = 3*(sensorReadings[0]-sensorReadings[7])+2*(sensorReadings[1]-sensorReadings[6])+(sensorReadings[2]-sensorReadings[5]);      // Error algorithm

               
                lineErrorPredict = (lineError[3]-lineError[1 ]);       // Derivative
               
                
                //lineErrorPredict = ((x-2)*(x-3)*(x-4)/(-6)*(lineError[0])) + ((x-1)*(x-3)*(x-4)/(2)*(lineError[1])) + ((x-1)*(x-2)*(x-4)/(-2)*(lineError[2])) + ((x-1)*(x-2)*(x-3)/(6)*(lineError[3]))/100;
                
                /////////////////////////////////    PID control signal  ////////////////////////////

                lineControlSignal = 0.8*lineError[4] + 0.5*line_Ki*lineErrorSum + lineErrorPredict;    

                ///////////////////////////////////////////////////////////////////////////////////  
                
                // Defining boundaries
                
                if ((lineErrorSum > 15) or (lineErrorSum < 15)){                      //Regulating the max speed
                     speed = 3;
                  }
                else if ((lineErrorPredict>8)){                      //Regulating the max speed
                     speed = 2;
                  }

                if (lineErrorSum>30){                               //Regulating max lineError
                  lineErrorSum = 30;
                } 
                else if (lineErrorSum<-30){                               //Regulating max lineError
                  lineErrorSum = -30;
                }
           

 }
 
 void floorPattern(){
      //Convert sensor readings to string
     string groundScan = to_string(sensorReadings[0]) + to_string(sensorReadings[1]) + to_string(sensorReadings[2]) + to_string(sensorReadings[3]) + to_string(sensorReadings[4]) + to_string(sensorReadings[5]) + to_string(sensorReadings[6]) + to_string(sensorReadings[7]) ;
     
     int onesCount = 0;  //Count no. ot 1 s in string
     for (int i = 0;( i = groundScan.find('1',i)) != string::npos; i++){
       onesCount++;
     }

     // Store 5 values of above strings 
     for (int j = 0; j<=3; j++){
       floorErrorControl[j] = floorErrorControl[j+1];   
     }
     floorErrorControl[4] = onesCount;
    
    //Sort the list to reduce errors
    for(int j =0; j<=4;j++){
        sortedFloorError[j] = floorErrorControl[j];
      }
     qsort(sortedFloorError, 5,sizeof(int),compare);
     
     //floorErrorControl.sort();
     //cout<< groundScan <<"    " <<onesCount <<endl;
     //cout<< floorErrorControl[0] << floorErrorControl[1] << floorErrorControl[2] << floorErrorControl[3] << floorErrorControl[4]  <<endl;
     cout<< floorLocation  << endl;
     //cout<< sortedFloorError[2]  << endl;
     
     if ((not rightTurn) and (not leftTurn) and(sortedFloorError[2] == 3)){  //Line following
           hardTurnCounter = 0;
           whiteLineCounter = 0;
           blackLineCounter = 0;
           floorLocation = "Line_Fllowing";
       }
      
    // Hard Turn
     else if ((not rightTurn) and (not leftTurn) and (sortedFloorError[2] >=5) and (sortedFloorError[2]<=7)){
           hardTurnCounter ++;
           if (hardTurnCounter >=3){
             floorLocation = "Hard_Turn";
             whiteLineCounter = 0;
             blackLineCounter = 0;
             T_Junction = false;
           }
          }
  
          
    //White box     
     else if((not rightTurn) and (not leftTurn) and (sortedFloorError[2] == 8)){
           whiteLineCounter ++;
           hardTurnCounter = 0;
           blackLineCounter = 0;
           if(whiteLineCounter>5){
             T_Junction = true;
           }
           
           if (whiteLineCounter>=20){
             floorLocation = "White_Box";
             T_Junction = false;
             whiteLineCounter = 0;
           }   
     }
     
     // Check whether robot is out of track
     else if ((not rightTurn) and (not leftTurn) and(sortedFloorError[2] == 0)){
           hardTurnCounter = 0;
           whiteLineCounter = 0;
           blackLineCounter++;
           if (blackLineCounter >10){   // Change the threshhold
           floorLocation = "Lost";
           }
       }
    
    //T Junction
    if((not rightTurn) and (not leftTurn) and T_Junction and (sortedFloorError[2] == 0)){
             floorLocation = "T_Junction";
              hardTurnCounter = 0;
              whiteLineCounter = 0;
              blackLineCounter = 0;
              T_Junction = false;
             
       }
       
    if (floorLocation == "Hard_Turn"){
        if((not rightTurn) and (sensorReadings[4]== 1) and (sensorReadings[5]== 1) and (sensorReadings[6]== 1) and (sensorReadings[7]== 1)){
              floorLocation = "Hard_Turn_Left";
              leftTurn = true;
              /*turnLeft();
              turnLeftCounter++;
              if (turnLeftCounter > 30){
                  leftTurn = false;
                  turnLeftCounter = 0;
                  cout<<"complete"<<endl; 
              } */
        }
        else if((not leftTurn) and(sensorReadings[0]== 1) and (sensorReadings[1]== 1) and (sensorReadings[2]== 1) and (sensorReadings[3]== 1)){
              floorLocation = "Hard_Turn_Right";
              rightTurn = true;
             /* turnRight();
              turnRightCounter++;
              if (turnRightCounter > 30){
                  rightTurn = false;
                  turnRightCounter = 0;
                  cout<<"complete"<<endl;
              } */
        }
    }
     
           
       
 }
 
 int compare(const void* a , const void* b){
    const int* x = (int*)a;
    const int* y = (int*)b;
    
    if (*x>*y)
        return 1;
    else if(*x<*y)
        return -1;
    return 0;
 }
 
void search180(){
     if(searchCounter<120){
        turnLeft();
        searchCounter++;
        }
      else if(searchCounter<340){
        turnRight();
        searchCounter++;
      }
      
}

void imagePointFollowing(){
    //armMotors[2]->setPosition(0.1);   //Set camera position
    if ((xBoxPoints[4] <31) and not reached){ //Have to turn Left
       turnLeftControl = 32-xBoxPoints[4];  // take the box to the middle
       if(turnLeftControl>0){
         //cout<<"turningLeft"<<endl;
         turnLeft();
       }
      
    }
    else if ((xBoxPoints[4] >33) and not reached){  //Have to turn right
      turnRightControl = xBoxPoints[4] -32;  //To take the box to the middle
       if(turnRightControl>0){
       //cout<<"turningRight"<<endl;
         turnRight();
       }
       }
    else{
        //cout<<"forward"<<endl;
       if(sonicSensorReadings[0]>950){    //front sensor detected object if <950
       forward();
       }
       else{
         reached = true;
       }
       if ((sonicSensorReadings[1]>sonicSensorReadings[2] +10) and reached and (not orientation)){  //check side sensors with 10 gap to get correct orientation
         turnLeft();
         
       }
       else if((sonicSensorReadings[2] >sonicSensorReadings[1] +10) and reached and (not orientation)){
         turnRight();
       }
       else if (reached){
         stop();
         orientation = true;
         grabTheBox();
         controlForward(200);
       }
       //grabTheBox();
      }  
    
    }

void grabTheBox(){
            //Get the arm to front
         if(stage == 0){        //Stage 01
            if(armrotate <0){
              armrotate += 0.1;
              }  
            else {
              armrotate +=0;
              stage++; 
            } 
            armMotors[1]->setPosition(armrotate);
          }
          if(stage==1){   //Stage 2 open the grippers
           /*if(catchRight <0.5 && catchLeft >-0.22){
              catchRight += 0.1;
              catchLeft -= 0.1;
              } */
             
            if(catchRight >0 && catchLeft <0.4){
              catchRight += -0.1; 
              catchLeft -= -0.1; 
              }
            else {
              catchRight +=0; 
              catchLeft +=0;
              stage++;
            }
            armMotors[4]->setPosition(catchRight);
            armMotors[5]->setPosition(catchLeft);
            }
          if(stage==3){
            forward();
            gripperCounter++;
            if(gripperCounter>20){
              stop();
              stage++;
            }
          }
            
            
}

void liftTheBox(){
    
}

void controlForward(int n){
       if (iter<n){
          forward();
          iter++;
      }
      else{
        stop();
      }
  }




 





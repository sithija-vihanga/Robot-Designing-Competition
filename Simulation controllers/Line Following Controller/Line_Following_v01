//Team Name :- Team Spectro
#include <webots/Motor.hpp>
#include <webots/Robot.hpp>
#include <webots/Keyboard.hpp>
#include <webots/Camera.hpp>
//#include <webots/LED.hpp>
//#include <webots/Motor.hpp>
#include <webots/DistanceSensor.hpp>
#include <string>


#define TIME_STEP 32
using namespace webots;
using namespace std;

  Motor *wheels[4];
  DistanceSensor *DS[8]; 
  Motor *base; 
  Motor *camControl; 
  
  
  
  int counter = 0;
  int speed = 5;
  int sensorReadings[8];
  double lineControlSignal = 0.0;
  double lineErrorSum = 0.0;
  double lineError[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
  int leftSpeed = 0;
  int rightSpeed = 0;
  
  double line_Kp = 1;
  double line_Kd = 1;
  double line_Ki = 0.01; 

  double lineErrorPredict = 0.0;
  //int x = 7;   // predicting sample
  //bool turning = false;
  //double maxSpeed = 5.0;
  
  double rotate = 0.0;
  double upAndDown = 0.0;
  
  
  string floorColor = "Black";
  string floorLocation= "Unknown";
  int floorErrorControl[5] = {0,0,0,0,0};
  int sortedFloorError[5];
  int hardTurnCounter = 0;
  int whiteLineCounter = 0;
  int blackLineCounter = 0;
  bool T_Junction = false;
  int turnRightCounter = 0;
  int turnLeftCounter = 0;
  bool rightTurn = false;
  bool leftTurn = false;
  

  
  
  void forward();
  void reverse();
  void turnRight();
  void turnLeft();
  void stop();
  void skidDrive(double Lspeed, double Rspeed);
  void readLineSensors();
  int  compareLines( double values);
  void pidLineFollower();
  double speedControl(double speed);
  void floorPattern();
  int compare(const void* a, const void* b);
  //double maxSpeedControl(double lineControlSignal);

  
  


int main(int argc, char **argv) {

  Robot *robot = new Robot();
  
  Keyboard kb;
  
  Camera *cm;
  cm= robot->getCamera("cam");
  cm->enable(TIME_STEP);

  char wheels_names[4][15] = {"leftTopMotor", "leftRearMotor","rightTopMotor", "rightRearMotor"};                                //store names of motors
  char dsNames[8][8] = {"IR1","IR2","IR3","IR4","IR5","IR6","IR7","IR8"}; 
  
  for (int i = 0; i < 4; i++) {                                      //Initializing motors using a for loop
    wheels[i] = robot->getMotor(wheels_names[i]);
    wheels[i]->setPosition(INFINITY);
    
  }
  
  base=robot->getMotor("cmBase");
  camControl=robot->getMotor("camMotor");
  
  //Initialize distance sensors
  for (int j = 0; j<8; j++){                                                    //Enabling distance sensors using for a loop
     DS[j] = robot->getDistanceSensor(dsNames[j]);                 
     DS[j]->enable(TIME_STEP);                                      
 }
 
 
   kb.enable(TIME_STEP);

  
  

   while (robot->step(TIME_STEP) != -1) {
             int key= kb.getKey();
            //speed = maxSpeedControl(lineControlSignal);
             
             leftSpeed = speedControl(speed+lineControlSignal);
             rightSpeed = speedControl(speed-lineControlSignal);
             
             if(floorLocation=="T_Junction"){   //Decision at first junction
               rightTurn = true;
             }

             if(rightTurn){
                 turnRight();
                 turnRightCounter++;
                 if (turnRightCounter>30){
                     rightTurn = false;
                     turnRightCounter = 0;
                 }
             }
             
             else if(leftTurn){
                 turnLeft();
                 turnLeftCounter++;
                 if (turnLeftCounter>30){
                     leftTurn = false;
                     turnLeftCounter = 0;
                 }
             }
             else{
             skidDrive(leftSpeed,rightSpeed);
             }
             counter+=1;
             readLineSensors();
             
             floorPattern();
             
             pidLineFollower();
          
             //std::cout <<"Color codes "<< DS[0]->getValue() <<"  " << DS[1]->getValue() <<"  "<< DS[2]->getValue() <<"  "<< DS[3]->getValue() <<"  "<< DS[4]->getValue() <<"  " <<"Front motors " <<DS[5]->getValue() <<"  " << DS[6]->getValue() <<"  " << DS[7]->getValue() <<std::endl;   
             //std::cout << sensorReadings[0] <<" " << sensorReadings[1] <<" " << sensorReadings[2] <<" " << sensorReadings[3] <<" " << sensorReadings[4] <<" " << sensorReadings[5] <<" " << sensorReadings[6] <<" " << sensorReadings[7] <<" "  <<std::endl;   
             //std::cout <<lineErrorPredict <<" "<< lineError[3] <<" " <<lineErrorSum <<std::endl;
            //std::cout << lineError[0] <<" " << lineError[1] <<" " << lineError[2] <<" " << lineError[3] <<" " << lineError[4] <<" " <<lineErrorSum<<std::endl;   
            //std::cout<<lineControlSignal<<std::endl;
            
            if(key == 65 && rotate <1.57){
              rotate += 0.1;
              }
            else if(key == 68 && rotate >-1.57){
              rotate += -0.1; 
              }
            else {
              rotate +=0; 
            }
            base->setPosition(rotate);
            
            
        
            
            if(key == 87 && upAndDown <1.57){
              upAndDown += 0.1;
              }
            else if(key == 83 && upAndDown >-1.57){
              upAndDown += -0.1; 
              }
            else {
              upAndDown +=0; 
            }
            camControl->setPosition(upAndDown);
            
            
            //std::cout<<key<<std::endl;
            
            
            
            
            
            
            
            //std::cout<<speed<<std::endl;
  }  
}

 void forward(){
               wheels[0]->setVelocity(speed);
               wheels[1]->setVelocity(speed);
               wheels[2]->setVelocity(speed);
               wheels[3]->setVelocity(speed);
 }
void reverse(){
               wheels[0]->setVelocity(-speed);
               wheels[1]->setVelocity(-speed);
               wheels[2]->setVelocity(-speed);
               wheels[3]->setVelocity(-speed);
 }
 
 void turnRight(){
               wheels[0]->setVelocity(speed);
               wheels[1]->setVelocity(speed);
               wheels[2]->setVelocity(-speed);
               wheels[3]->setVelocity(-speed);
 }

 void turnLeft(){
               wheels[0]->setVelocity(-speed);
               wheels[1]->setVelocity(-speed);
               wheels[2]->setVelocity(speed);
               wheels[3]->setVelocity(speed);
 }
 
 void stop(){
               wheels[0]->setVelocity(0);
               wheels[1]->setVelocity(0);
               wheels[2]->setVelocity(0);
               wheels[3]->setVelocity(0);
 }

 void skidDrive(double Lspeed , double Rspeed){                //Differential drive
               wheels[0]->setVelocity(Lspeed);
               wheels[1]->setVelocity(Lspeed);
               wheels[2]->setVelocity(Rspeed);
               wheels[3]->setVelocity(Rspeed);
 }
 
 void readLineSensors(){
               
                for (int j = 0; j <8; j++){
                   sensorReadings[j] = DS[j]->getValue();                                                    //Enabling distance sensors using for a loop
                   sensorReadings[j] = compareLines( sensorReadings[j]);              
                                              
                   }
 }
 
 int compareLines(double value){    //Edit the threshhold values
 
                //cout<< value <<endl;                   // Extracting colors
                if (value<100){                        
                  return 1;                         //White
                }
                else if((value>100) and (value <150)){   //Red
                  return 1;
                }
                else if(value>600 and value <700){     //Blue
                  return 1;
                }
                else if(value>700){                 //Black
                  return 0;
                }
                else {
                  return 1;
                }
 }

 /*double maxSpeedControl(double lineControlSignal){
                double speed = maxSpeed;
                if(lineControlSignal > 4){
                   speed = maxSpeed - lineControlSignal;
                }
                 return speed; 
 } */

double speedControl(double speed){
              if (speed>10){
                speed = 10;
              }
              else if (speed<-10){
                speed = -10;
              }
              return speed;
 }

 void pidLineFollower(){
                for (int i = 0; i<4 ; i++){                           // Storing 5 previous lineError values
                  lineError[i] = lineError[i+1];
                }

              
                if (lineError[3]>lineError[2]){                          
                  if (lineError[3]<lineError[2]+8){                      
                      
                  }
                  else{
                    lineError[3] = lineError[2];
                  }
                }
                else if(lineError[3]<lineError[2]){
                  if (8+lineError[3]>lineError[2]){                      
                      
                  }
                   else{
                    lineError[3] = lineError[2];
                  }
                }
                
                lineErrorSum += lineError[3];                    // Get sum of the errors
                

          
                //lineError[4] = 2*(sensorReadings[7]-sensorReadings[5])+2*(1-sensorReadings[7])*(1-sensorReadings[5])*(sensorReadings[4]-sensorReadings[0])+(sensorReadings[4]-sensorReadings[1]);      // Error algorithm
                lineError[4] = 3*(sensorReadings[0]-sensorReadings[7])+2*(sensorReadings[1]-sensorReadings[6])+(sensorReadings[2]-sensorReadings[5]);      // Error algorithm

               
                lineErrorPredict = (lineError[3]-lineError[1 ]);       // Derivative
               
                
                //lineErrorPredict = ((x-2)*(x-3)*(x-4)/(-6)*(lineError[0])) + ((x-1)*(x-3)*(x-4)/(2)*(lineError[1])) + ((x-1)*(x-2)*(x-4)/(-2)*(lineError[2])) + ((x-1)*(x-2)*(x-3)/(6)*(lineError[3]))/100;
                
                /////////////////////////////////    PID control signal  ////////////////////////////

                lineControlSignal = 0.8*lineError[4] + 0.5*line_Ki*lineErrorSum + lineErrorPredict;    

                ///////////////////////////////////////////////////////////////////////////////////  
                
                // Defining boundaries
                
                if ((lineErrorSum > 15) or (lineErrorSum < 15)){                      //Regulating the max speed
                     speed = 3;
                  }
                else if ((lineErrorPredict>8)){                      //Regulating the max speed
                     speed = 2;
                  }

                if (lineErrorSum>30){                               //Regulating max lineError
                  lineErrorSum = 30;
                } 
                else if (lineErrorSum<-30){                               //Regulating max lineError
                  lineErrorSum = -30;
                }
           

 }
 
 void floorPattern(){
     string groundScan = to_string(sensorReadings[0]) + to_string(sensorReadings[1]) + to_string(sensorReadings[2]) + to_string(sensorReadings[3]) + to_string(sensorReadings[4]) + to_string(sensorReadings[5]) + to_string(sensorReadings[6]) + to_string(sensorReadings[7]) ;
     
     int onesCount = 0;
     for (int i = 0;( i = groundScan.find('1',i)) != string::npos; i++){
       onesCount++;
     }
     for (int j = 0; j<=3; j++){
       floorErrorControl[j] = floorErrorControl[j+1];
     }
     
     floorErrorControl[4] = onesCount;
    for(int j =0; j<=4;j++){
        sortedFloorError[j] = floorErrorControl[j];
      }
    
     qsort(sortedFloorError, 5,sizeof(int),compare);
     
     //floorErrorControl.sort();
     //cout<< groundScan <<"    " <<onesCount <<endl;
     //cout<< floorErrorControl[0] << floorErrorControl[1] << floorErrorControl[2] << floorErrorControl[3] << floorErrorControl[4]  <<endl;
     cout<< floorLocation  << endl;
     //cout<< sortedFloorError[2]  << endl;
     
     if ((not rightTurn) and (not leftTurn) and(sortedFloorError[2] == 3)){
           hardTurnCounter = 0;
           whiteLineCounter = 0;
           blackLineCounter = 0;
           floorLocation = "Line_Fllowing";
       }
     else if ((not rightTurn) and (not leftTurn) and (sortedFloorError[2] >=5) and (sortedFloorError[2]<=7)){
           hardTurnCounter ++;
           
           if (hardTurnCounter >=3){
             floorLocation = "Hard_Turn";
             whiteLineCounter = 0;
             blackLineCounter = 0;
             T_Junction = false;
           }
          }
  
          
           
     else if((not rightTurn) and (not leftTurn) and (sortedFloorError[2] == 8)){
           whiteLineCounter ++;
           hardTurnCounter = 0;
           blackLineCounter = 0;
           if(whiteLineCounter>5){
             T_Junction = true;
           }
           
           if (whiteLineCounter>=20){
             floorLocation = "White_Box";
             T_Junction = false;
             whiteLineCounter = 0;
           }
           
         
     }
     
     else if ((not rightTurn) and (not leftTurn) and(sortedFloorError[2] == 0)){
           hardTurnCounter = 0;
           whiteLineCounter = 0;
           blackLineCounter++;
           if (blackLineCounter >10){
           floorLocation = "Lost";
           }
       }
    if((not rightTurn) and (not leftTurn) and T_Junction and (sortedFloorError[2] == 0)){
             floorLocation = "T_Junction";
              hardTurnCounter = 0;
              whiteLineCounter = 0;
              blackLineCounter = 0;
              T_Junction = false;
             
       }
       
    if (floorLocation == "Hard_Turn"){
        if((not rightTurn) and (sensorReadings[4]== 1) and (sensorReadings[5]== 1) and (sensorReadings[6]== 1) and (sensorReadings[7]== 1)){
              floorLocation = "Hard_Turn_Left";
              leftTurn = true;
              /*turnLeft();
              turnLeftCounter++;
              if (turnLeftCounter > 30){
                  leftTurn = false;
                  turnLeftCounter = 0;
                  cout<<"complete"<<endl; 
              } */
        }
        else if((not leftTurn) and(sensorReadings[0]== 1) and (sensorReadings[1]== 1) and (sensorReadings[2]== 1) and (sensorReadings[3]== 1)){
              floorLocation = "Hard_Turn_Right";
              rightTurn = true;
             /* turnRight();
              turnRightCounter++;
              if (turnRightCounter > 30){
                  rightTurn = false;
                  turnRightCounter = 0;
                  cout<<"complete"<<endl;
              } */
        }
    }
     
           
       
 }
 
 int compare(const void* a , const void* b){
    const int* x = (int*)a;
    const int* y = (int*)b;
    
    if (*x>*y)
        return 1;
    else if(*x<*y)
        return -1;
    return 0;
 }



 



